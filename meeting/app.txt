const leftPanel = document.getElementById('leftPanel');
const rightPanel = document.getElementById('rightPanel');
const audio = document.getElementById('audio');
const autoScrollCheckbox = document.getElementById('autoScroll');

let leftLines = [];
let rightLines = [];
let leftDivs = [];
let rightDivs = [];

let highlightSide = null;
let highlightLeftActive = false;
let highlightRightActive = false;

let leftFileName = '';
let rightFileName = '';


// 左右列ボタンで全体ハッチ
document.getElementById('highlightLeftBtn').onclick = () => {
  highlightLeftActive = !highlightLeftActive; // トグル
  applyHighlightAll('left', highlightLeftActive);
};
document.getElementById('highlightRightBtn').onclick = () => {
  highlightRightActive = !highlightRightActive; // トグル
  applyHighlightAll('right', highlightRightActive);
};

// 行パース関数
function parseLine(line) {
  const match = line.match(/\[(\d+):(\d+):(\d+) -> (\d+):(\d+):(\d+)\] (.*)/);
  if (!match) return null;
  const [, sh, sm, ss, eh, em, es, text] = match;
  return {
    startTime: +sh*3600 + +sm*60 + +ss,
    endTime: +eh*3600 + +em*60 + +es,
    text,
    editedText: null,
    disabled: false,
    color: null
  };
}

// ファイル読み込み
function handleFile(file, side) {
  const reader = new FileReader();
  reader.onload = e => {
    const lines = e.target.result.split('\n').map(parseLine).filter(Boolean);
    if(side === 'left') {
      leftLines = lines;
      leftFileName = file.name;
    } else {
      rightLines = lines;
      rightFileName = file.name;
    }
    render();
  };
  reader.readAsText(file);
}

// document.getElementById('file1').addEventListener('change', e => handleFile(e.target.files[0], 'left'));
// document.getElementById('file2').addEventListener('change', e => handleFile(e.target.files[0], 'right'));

document.getElementById('files').addEventListener('change', e => {
  const files = e.target.files;
  if(files.length != 2){
    alert('2つのファイルを選択してください');
    return;
  }
  // 左右に割り当て
  handleFile(files[0], 'left');
  handleFile(files[1], 'right');
});

function applyHighlightAll(side, enable){
  for(let i=0;i<leftLines.length;i++){
    const leftLine = leftLines[i];
    const rightLine = rightLines[i];
    const leftDiv = leftDivs[i];
    const rightDiv = rightDivs[i];

    if(side==='left' && !leftLine.disabled){
      if(!rightDiv.classList.contains('green')) leftDiv.classList.toggle('green', enable);
    }

    if(side==='right' && !rightLine.disabled){
      if(!leftDiv.classList.contains('green')) rightDiv.classList.toggle('green', enable);
    }
  }
}
// function applyHighlightAll(side) {
//   highlightSide = side; // render 内で使用
//   for(let i=0;i<leftLines.length;i++){
//     const leftLine = leftLines[i];
//     const rightLine = rightLines[i];
//     const leftDiv = leftDivs[i];
//     const rightDiv = rightDivs[i];

//     if(side==='left' && !leftLine.disabled){
//       // 右に緑が付いていない場合だけ
//       if(!rightDiv.classList.contains('green')) leftDiv.classList.add('green');
//     }
//     if(side==='right' && !rightLine.disabled){
//       if(!leftDiv.classList.contains('green')) rightDiv.classList.add('green');
//     }
//   }
// }

// 行レンダリング
function render() {
  leftPanel.innerHTML = `<div class="panel-header" style="padding:2px 5px; font-weight:bold; background:#f0f0f0;">${leftFileName}</div>`;
  rightPanel.innerHTML = `<div class="panel-header" style="padding:2px 5px; font-weight:bold; background:#f0f0f0;">${rightFileName}</div>`;
  leftDivs = [];
  rightDivs = [];
  const maxLen = Math.max(leftLines.length, rightLines.length);
  
  for (let i = 0; i < maxLen; i++) {
    const leftLine = leftLines[i] || { text:'', disabled:false };
    const rightLine = rightLines[i] || { text:'', disabled:false };

    const leftDiv = createLineDiv(leftLine, i, 'left');
    const rightDiv = createLineDiv(rightLine, i, 'right');

    // 緑ハッチ付与
    // render()内で全体ハッチ
// if(highlightSide === 'left' && !leftLine.disabled) leftDiv.classList.add('green');
// if(highlightSide === 'right' && !rightLine.disabled) rightDiv.classList.add('green');

    leftPanel.appendChild(leftDiv);
    rightPanel.appendChild(rightDiv);

    leftDivs.push(leftDiv);
    rightDivs.push(rightDiv);
  }

  for (let i = 0; i < maxLen; i++) {
  const leftLine = leftLines[i] || { disabled:false };
  const rightLine = rightLines[i] || { disabled:false };
  const leftDiv = leftDivs[i];
  const rightDiv = rightDivs[i];

  // 左列全体ハッチ
  if(highlightSide === 'left' && !leftLine.disabled) {
    if(!rightDiv.classList.contains('green')) leftDiv.classList.add('green');
  }

  // 右列全体ハッチ
  if(highlightSide === 'right' && !rightLine.disabled) {
    if(!leftDiv.classList.contains('green')) rightDiv.classList.add('green');
  }
}

  syncRowHeights();
  highlightCurrentLine();
//   for(let i = 0; i < maxLen; i++){
//     const leftLine = leftLines[i] || {text:'', disabled:true};
//     const rightLine = rightLines[i] || {text:'', disabled:true};

//     // 差分判定
//     if(!leftLine.disabled && !rightLine.disabled && leftLine.text !== rightLine.text){
//       leftLine.color = 'green';
//       rightLine.color = 'red';
//     } else if(!leftLine.disabled && (rightLine.disabled || rightLine.text === '')){
//       leftLine.color = 'green';
//       rightLine.color = null;
//     } else if(!rightLine.disabled && (leftLine.disabled || leftLine.text === '')){
//       rightLine.color = 'red';
//       leftLine.color = null;
//     } else {
//       leftLine.color = null;
//       rightLine.color = null;
//     }

//     const leftDiv = createLineDiv(leftLine, i, 'left');
//     const rightDiv = createLineDiv(rightLine, i, 'right');
//     leftPanel.appendChild(leftDiv);
//     rightPanel.appendChild(rightDiv);
//   }

//   syncRowHeights();
//   highlightCurrentLine();
//   for(let i=0;i<maxLen;i++){
//     const leftLine = leftLines[i];
//     const rightLine = rightLines[i];
//     const leftDiv = createLineDiv(leftLine, i, 'left');
//     const rightDiv = createLineDiv(rightLine, i, 'right');
//     leftPanel.appendChild(leftDiv);
//     rightPanel.appendChild(rightDiv);
//   }

//   syncRowHeights();
}

function syncRowHeights() {
  const leftRows = leftPanel.querySelectorAll('.line');
  const rightRows = rightPanel.querySelectorAll('.line');

  for(let i=0; i<Math.max(leftRows.length, rightRows.length); i++){
    const leftRow = leftRows[i];
    const rightRow = rightRows[i];
    if(!leftRow || !rightRow) continue;
    const maxHeight = Math.max(leftRow.offsetHeight, rightRow.offsetHeight);
    leftRow.style.height = maxHeight + 'px';
    rightRow.style.height = maxHeight + 'px';
  }
}

// 行Div生成
function createLineDiv(line, index, side) {
  const div = document.createElement('div');
  div.className = 'line';
  if(line.disabled) div.classList.add('disabled');
  if(line.color) div.classList.add(line.color);

  // timestamp
  const ts = document.createElement('span');
  ts.className = 'timestamp';
  ts.textContent = `[${formatTime(line.startTime)} -> ${formatTime(line.endTime)}]`;
  ts.onclick = () => {
    audio.currentTime = line.startTime;
    scrollToLine(index);
  };

  // text
  const textSpan = document.createElement('span');
  textSpan.className = 'text';
  textSpan.textContent = line.editedText || line.text;
  if(line.editedText) textSpan.classList.add('edited');

  // 右クリックで緑ハッチ切替
  textSpan.oncontextmenu = (e) => {
    e.preventDefault();
    if(line.disabled) return; // disabledは無効
    const div = textSpan.parentElement; // 今の行 div
  const idx = index; // 行番号
  const leftDiv = leftDivs[idx];
  const rightDiv = rightDivs[idx];

  // 赤ハッチなら、クリックした側を緑、反対はハッチ削除
  if(div.classList.contains('red')){
    div.classList.remove('red');
    div.classList.add('green');

    // 反対側のハッチ削除
    const otherDiv = (div === leftDiv) ? rightDiv : leftDiv;
    otherDiv.classList.remove('red', 'green');
    return;
  }

  // 通常の緑ハッチトグル
  div.classList.toggle('green');
    // if(div.classList.contains('green')) div.classList.remove('green');
    // else div.classList.add('green');
  };

  // ダブルクリックで編集
  textSpan.ondblclick = () => {
    // disabled 行は編集不可
  if(line.disabled) return;

  // textarea 生成
  const modal = document.createElement('div');
  modal.style.position = 'fixed';
  modal.style.top = 0;
  modal.style.left = 0;
  modal.style.width = '100%';
  modal.style.height = '100%';
  modal.style.background = 'rgba(0,0,0,0.3)';
  modal.style.display = 'flex';
  modal.style.alignItems = 'center';
  modal.style.justifyContent = 'center';
  modal.style.zIndex = 1000;

  const textarea = document.createElement('textarea');
  textarea.value = line.editedText || line.text;
  textarea.style.width = '400px';
  textarea.style.height = '200px';
  textarea.style.fontSize = '18px';

  const okBtn = document.createElement('button');
  okBtn.textContent = 'OK';
  okBtn.onclick = () => {
    line.editedText = textarea.value;
    document.body.removeChild(modal);
    render();
  };

  const cancelBtn = document.createElement('button');
  cancelBtn.textContent = 'キャンセル';
  cancelBtn.onclick = () => {
    document.body.removeChild(modal);
  };

  const btnContainer = document.createElement('div');
  btnContainer.style.marginTop = '5px';
  btnContainer.appendChild(okBtn);
  btnContainer.appendChild(cancelBtn);

  const container = document.createElement('div');
  container.style.background = 'white';
  container.style.padding = '10px';
  container.style.borderRadius = '5px';
  container.appendChild(textarea);
  container.appendChild(btnContainer);

  modal.appendChild(container);
  document.body.appendChild(modal);

  textarea.focus();
  textarea.addEventListener('keydown', (e) => {
  e.stopPropagation(); // 親に届かないようにする

  if(e.key==='Enter'){
    if(e.shiftKey){
      e.preventDefault(); // 改行抑制
      okBtn.click();      // 編集確定
    } else {
      // 通常の Enter は改行
    }
  }
});
//   if(line.disabled) return;
//   const newText = prompt('テキストを編集してください', line.editedText || line.text);
//   if(newText !== null) {
//     line.editedText = newText;

//     // 行だけ更新
//     const div = side === 'left' ? leftDivs[index] : rightDivs[index];
//     const span = div.querySelector('.text');
//     span.textContent = line.editedText || line.text;

//     // 色更新
//     span.style.color = (line.editedText && line.editedText !== line.text) ? 'red' : 'black';
//   }
};

  // delete button
  const delBtn = document.createElement('span');
  delBtn.className = 'delete-btn';
  delBtn.textContent = '×';
  delBtn.onclick = () => {
    line.disabled = !line.disabled;
    if(line.disabled) div.classList.remove('green'); // disabledならハッチ解除
    render();
  };

  div.appendChild(ts);
  div.appendChild(textSpan);
  div.appendChild(delBtn);
  return div;
}
// function createLineDiv(line, index, side) {
//   const div = document.createElement('div');
//   div.className = 'line';
//   if(line.disabled) div.classList.add('disabled');
//   if(line.color) div.classList.add(line.color);

//   // timestamp
//   const ts = document.createElement('span');
//   ts.className = 'timestamp';
//   ts.textContent = `[${formatTime(line.startTime)} -> ${formatTime(line.endTime)}]`;
//   ts.onclick = () => {
//     audio.currentTime = line.startTime;
//     scrollToLine(index);
//   };

//   // text
//   const textSpan = document.createElement('span');
//   textSpan.className = 'text';
//   textSpan.textContent = line.editedText || line.text;
//   if(line.editedText) textSpan.classList.add('edited');
//   textSpan.ondblclick = () => {
//     const newText = prompt('編集してください', line.editedText || line.text);
//     if(newText!==null){
//       line.editedText = newText;
//       render();
//     }
//   };

//   // delete button
//   const delBtn = document.createElement('span');
//   delBtn.className = 'delete-btn';
//   delBtn.textContent = '×';
//   delBtn.onclick = () => {
//     line.disabled = !line.disabled;
//     render();
//   };

//   div.appendChild(ts);
//   div.appendChild(textSpan);
//   div.appendChild(delBtn);
//   return div;
// }

// 時間フォーマット
function formatTime(sec){
  const h = String(Math.floor(sec/3600)).padStart(2,'0');
  const m = String(Math.floor(sec%3600/60)).padStart(2,'0');
  const s = String(Math.floor(sec%60)).padStart(2,'0');
  return `${h}:${m}:${s}`;
}

// スクロール同期
function scrollToLine(index){
  const lineHeight = leftPanel.firstChild?.offsetHeight || 20;
  leftPanel.scrollTop = index * lineHeight;
  rightPanel.scrollTop = index * lineHeight;
}

// 左右スクロール同期
leftPanel.addEventListener('scroll', ()=>{ rightPanel.scrollTop = leftPanel.scrollTop; });
rightPanel.addEventListener('scroll', ()=>{ leftPanel.scrollTop = rightPanel.scrollTop; });

// 音声連動スクロール
audio.ontimeupdate = () => {
    if(autoScrollCheckbox.checked){
    const lines = leftLines;
    const idx = lines.findIndex(l => audio.currentTime >= l.startTime && audio.currentTime < l.endTime);
    if(idx >= 0) scrollToLine(idx);
  }
  highlightCurrentLine();
//   if(autoScrollCheckbox.checked){
//     const lines = leftLines; // 左右同じ長さを想定
//     const idx = lines.findIndex(l => audio.currentTime >= l.startTime && audio.currentTime < l.endTime);
//     if(idx >= 0) scrollToLine(idx);
//   }
//   highlightCurrentLine();
//   if(!autoScrollCheckbox.checked) return;
//   const lines = leftLines; // 左右同じ長さを想定
//   const idx = lines.findIndex(l => audio.currentTime >= l.startTime && audio.currentTime < l.endTime);
//   if(idx>=0) scrollToLine(idx);
};

window.addEventListener('resize', syncRowHeights);

// 再生中行の黄色ハイライト
// function highlightCurrentLine(){
//   const time = audio.currentTime;
//   leftPanel.querySelectorAll('.line').forEach((div, i) => {
//     const line = leftLines[i];
//     if(line && time >= line.startTime && time < line.endTime){
//       div.classList.add('yellow');
//     } else {
//       div.classList.remove('yellow');
//     }
//   });

//   rightPanel.querySelectorAll('.line').forEach((div, i) => {
//     const line = rightLines[i];
//     if(line && time >= line.startTime && time < line.endTime){
//       div.classList.add('yellow');
//     } else {
//       div.classList.remove('yellow');
//     }
//   });
// }

function highlightCurrentLine() {
  const time = audio.currentTime;
  leftPanel.querySelectorAll('.line').forEach((div, i) => {
    const line = leftLines[i];
    if(line && time >= line.startTime && time < line.endTime){
      div.classList.add('yellow');
    } else {
      div.classList.remove('yellow');
    }
  });

  rightPanel.querySelectorAll('.line').forEach((div, i) => {
    const line = rightLines[i];
    if(line && time >= line.startTime && time < line.endTime){
      div.classList.add('yellow');
    } else {
      div.classList.remove('yellow');
    }
  });
}

function exportHighlightedText() {
  const output = [];

  for(let i=0; i<leftLines.length; i++){
    const leftDiv = leftDivs[i];
    const rightDiv = rightDivs[i];
    const leftLine = leftLines[i];
    const rightLine = rightLines[i];

    if(leftLine.disabled && rightLine.disabled) continue;

    const leftGreen = leftDiv.classList.contains('green');
    const rightGreen = rightDiv.classList.contains('green');

    // 両方緑の場合 → 出力中断
    if(leftGreen && rightGreen){
      leftDiv.classList.remove('green');
      rightDiv.classList.remove('green');
      leftDiv.classList.add('red');
      rightDiv.classList.add('red');

    //   const choice = 
        alert(`行 ${i+1} 両方緑です。どちらかを緑にしてください。`);
    //   if(choice==='l') leftDiv.classList.add('green');
    //   else if(choice==='r') rightDiv.classList.add('green');

      alert("両方緑の行がありました。出力は中断されました。");
      return; // 出力中断
    }

    // どちらか緑なら出力
    if(leftGreen) output.push(formatLine(leftLine));
    if(rightGreen) output.push(formatLine(rightLine));
  }

  // 全行出力（コンソールやファイル保存など）
  console.log(output.join('\n'));

  if(output.length === 0){
    alert("出力対象の行はありません。");
    return;
  }

  // Blob でテキストファイル作成
  const blob = new Blob([output.join('\n')], { type: 'text/plain' });
  const url = URL.createObjectURL(blob);

  // ダウンロードリンク作成してクリック
  const a = document.createElement('a');
  a.href = url;
  a.download = 'highlighted_lines.txt';
  a.click();

  URL.revokeObjectURL(url);
}

// 書式維持用
function formatLine(line){
  return `[${formatTime(line.startTime)} -> ${formatTime(line.endTime)}] ${line.editedText || line.text}`;
}

const exportBtn = document.getElementById('exportGreen');

exportBtn.onclick = () => {
  exportHighlightedText();
};

let selectedRow = 0;
let selectedSide = 'left'; // 'left' or 'right'

// 選択中 div の赤線表示
function highlightSelectedDiv(){
  leftDivs.forEach((div,i)=>{
    if(i===selectedRow && selectedSide==='left') div.style.outline='2px solid red';
    else div.style.outline='none';
  });
  rightDivs.forEach((div,i)=>{
    if(i===selectedRow && selectedSide==='right') div.style.outline='2px solid red';
    else div.style.outline='none';
  });

  // 選択行が表示されるようスクロール
  const panel = selectedSide==='left' ? leftPanel : rightPanel;
  const div = (selectedSide==='left' ? leftDivs[selectedRow] : rightDivs[selectedRow]);
  if(div){
    const top = div.offsetTop;
    const bottom = top + div.offsetHeight;
    if(panel.scrollTop > top) panel.scrollTop = top;
    else if(panel.scrollTop + panel.clientHeight < bottom) panel.scrollTop = bottom - panel.clientHeight;
  }
}

// キーボード操作
document.addEventListener('keydown', (e)=>{
  const maxRow = Math.max(leftLines.length, rightLines.length) - 1;

  console.log(e.ctrlKey)
  console.log(e.key)
  if(e.ctrlKey){
    switch(e.key){
      case '6':
        audio.currentTime = Math.max(0, audio.currentTime + 2);
        e.preventDefault();
        break;
      case '3':
        audio.currentTime = Math.max(0, audio.currentTime - 3);
        e.preventDefault();
        break;
      case '2':
        audio.playbackRate = 1.3;
        e.preventDefault();
        break;
      case '1':
        audio.playbackRate = 1.0; // 元の速度に戻す
        e.preventDefault();
        break;
    }
  }
  if(document.activeElement.tagName === 'TEXTAREA') return;

  switch(e.key){
    case 'ArrowUp':
      if(selectedRow>0) selectedRow--;
      highlightSelectedDiv();
      e.preventDefault();
      break;
    case 'ArrowDown':
      if(selectedRow<maxRow) selectedRow++;
      highlightSelectedDiv();
      e.preventDefault();
      break;
    case 'ArrowLeft':
      selectedSide = 'left';
      highlightSelectedDiv();
      e.preventDefault();
      break;
    case 'ArrowRight':
      selectedSide = 'right';
      highlightSelectedDiv();
      e.preventDefault();
      break;
    case 'Enter':
        if(e.shiftKey){
        const line = (selectedSide==='left') ? leftLines[selectedRow] : rightLines[selectedRow];
        if(line) audio.currentTime = line.startTime;
        e.preventDefault();
        break;
      }
      const line = (selectedSide==='left') ? leftLines[selectedRow] : rightLines[selectedRow];
      openEditModal(line);
      e.preventDefault();
      break;
    default:
      break;
  }

  // スペースキー（ここだけ e.code）
  if(e.code === 'Space'){
    e.preventDefault(); // ページスクロール防止
    if(audio.paused) audio.play();
    else audio.pause();
  }
});

// 既存のダブルクリック編集関数を共通化
function openEditModal(line){
  if(line.disabled) return;

  const modal = document.createElement('div');
  modal.style.position = 'fixed';
  modal.style.top = 0;
  modal.style.left = 0;
  modal.style.width = '100%';
  modal.style.height = '100%';
  modal.style.background = 'rgba(0,0,0,0.3)';
  modal.style.display = 'flex';
  modal.style.alignItems = 'center';
  modal.style.justifyContent = 'center';
  modal.style.zIndex = 1000;

  const textarea = document.createElement('textarea');
  textarea.value = line.editedText || line.text;
  textarea.style.width = '500px';
  textarea.style.height = '300px';
  textarea.style.fontSize = '18px';
  textarea.style.lineHeight = '1.5';

  const okBtn = document.createElement('button');
  okBtn.textContent = 'OK';
  okBtn.onclick = () => {
    line.editedText = textarea.value;
    document.body.removeChild(modal);
    render();
  };

  const cancelBtn = document.createElement('button');
  cancelBtn.textContent = 'キャンセル';
  cancelBtn.onclick = () => document.body.removeChild(modal);

  const btnContainer = document.createElement('div');
  btnContainer.style.marginTop = '10px';
  btnContainer.appendChild(okBtn);
  btnContainer.appendChild(cancelBtn);

  const container = document.createElement('div');
  container.style.background = 'white';
  container.style.padding = '15px';
  container.style.borderRadius = '8px';
  container.appendChild(textarea);
  container.appendChild(btnContainer);

  modal.appendChild(container);
  document.body.appendChild(modal);

  textarea.focus();

  // Shift + Enter で OK
  textarea.addEventListener('keydown', (e) => {
  e.stopPropagation(); // 親に届かないようにする

  if(e.key==='Enter'){
    if(e.shiftKey){
      e.preventDefault(); // 改行抑制
      okBtn.click();      // 編集確定
    } else {
      // 通常の Enter は改行
    }
  }
});
}

window.onload= () =>{
    const audio = document.getElementById('audio');
    document.getElementById('audioFile').addEventListener('change', (e) => {
  const file = e.target.files[0];
  if(!file) return;

  // 選択したファイルを audio src に設定
  const url = URL.createObjectURL(file);
  audio.src = url;
  audio.load(); // これで読み込み開始
  audio.volume = 0.1; // 初期ボリュームを小さくする場合
});
}
